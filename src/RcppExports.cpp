// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// validate_database_files
SEXP validate_database_files(std::string db_prefix, int num_genes);
RcppExport SEXP _gesel_validate_database_files(SEXP db_prefixSEXP, SEXP num_genesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type db_prefix(db_prefixSEXP);
    Rcpp::traits::input_parameter< int >::type num_genes(num_genesSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_database_files(db_prefix, num_genes));
    return rcpp_result_gen;
END_RCPP
}
// validate_gene_files
int validate_gene_files(std::string gene_prefix, Rcpp::Nullable<Rcpp::CharacterVector> types);
RcppExport SEXP _gesel_validate_gene_files(SEXP gene_prefixSEXP, SEXP typesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type gene_prefix(gene_prefixSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type types(typesSEXP);
    rcpp_result_gen = Rcpp::wrap(validate_gene_files(gene_prefix, types));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gesel_validate_database_files", (DL_FUNC) &_gesel_validate_database_files, 2},
    {"_gesel_validate_gene_files", (DL_FUNC) &_gesel_validate_gene_files, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_gesel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
